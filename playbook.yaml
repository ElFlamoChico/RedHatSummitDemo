---
#------------------------------------------------------------------------------
# 
# Create a simple AWS instance:
# 1. Create SSH Key Pair
# 2. Create VPC
# 3. Create Internet Gateway
# 4. Create Subnet
# 5. Create Route Table
# 6. Create Security Group
# 7. Create EC2 Instance
#
# Assumes AWS_* environment variables for task authentication:
#   export AWS_REGION='us-west-1'
#   export AWS_ACCESS_KEY='AKIAIOSF/EXAMPLE+KEY'
#   export AWS_SECRET_KEY='wJalrXUtnFEMI/K7MDENG/bPxRfi/EXAMPLE+KEY'
# 
# Run with `ansible-playbook playbook.yaml`
#
# Connect with `ssh -i ./AWS_EC2_Instance_Test.private_key.pem ec2-user@hostname`
#
# For more AMI IDs for other images and in different regions, see
# <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html>
#
#------------------------------------------------------------------------------

- name: AWS EC2 Instance Playbook
  hosts: localhost
  gather_facts: yes   # required for `ansible_date_time`
  vars:
    project_name: AWS_EC2_Instance_Test
    ami_id: ami-04b6c97b14c54de18   # Amazon Linux 2 AMI (HVM), SSD Volume Type
    instance_type: t2.micro
    vpc_cidr: 172.31.0.0/16
    sub_cidr: 172.31.1.0/24
  tasks:


  - name: Show Playbook Options
    ansible.builtin.debug: 
      msg: 
      - "project_name: {{ project_name }}"
      - "ami_id: {{ ami_id }}"
      - "instance_type: {{ instance_type }}"
      - "vpc_cidr: {{ vpc_cidr }}"
      - "sub_cidr: {{ sub_cidr }}"




  - name: Create SSH Key Pair - required for SSH to instance as `ec2-user`
    amazon.aws.ec2_key:
      name: "{{ project_name }}.public_key"
      state: present
    register: key_pair

  - name: Show key_pair
    ansible.builtin.debug: var=key_pair

  - name: Save Private Key Locally
    when: key_pair.changed
    ansible.builtin.copy:
      content: "{{ key_pair.key.private_key }}"
      dest: "{{ playbook_dir }}/{{ project_name }}.private_key.pem"
      mode: '0400'




  - name: Create a virtual private cloud (VPC)
    amazon.aws.ec2_vpc_net:
      name: "{{ project_name }}_vpc"      # required
      # Required: an IPv4 CIDR block that must be between /16 - /28
      # Default: 172.31.0.0/16
      cidr_block: "{{ vpc_cidr | default( '172.31.0.0/16' ) }}"
      tags:
        Project: "{{ project_name }}"
        StartDate: "{{ ansible_date_time.date }}"
    register: vpc

  - name: Show vpc
    ansible.builtin.debug: var=vpc




  - name: Create an Internet Gateway to connect VPC to Internet
    community.aws.ec2_vpc_igw:
      vpc_id: "{{ vpc.vpc.id }}"
      state: present
      tags:
        Name: "{{ project_name }}_igw"
        Project: "{{ project_name }}"
        StartDate: "{{ ansible_date_time.date }}"
    register: igw

  - name: Show igw
    ansible.builtin.debug: var=igw




  - name: Create a Subnet - a /24 within the VPC's /16
    amazon.aws.ec2_vpc_subnet:
      vpc_id: "{{ vpc.vpc.id }}"
      cidr: "{{ sub_cidr | default( '172.31.0.0/24' ) }}"
      tags:
        Name: "{{ project_name }}_subnet"
        Project: "{{ project_name }}"
        StartDate: "{{ ansible_date_time.date }}"
    register: subnet

  - name: Show subnet
    ansible.builtin.debug: var=subnet




  - name: Create Route Table and Add Route from VPC to Internet Gateway
    community.aws.ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      subnets:
        - "{{ subnet.subnet.id }}"
      routes:
        - dest: 0.0.0.0/0
          gateway_id: "{{ igw.gateway_id }}"
      tags:
        Name: "{{ project_name }}_rt"
        Project: "{{ project_name }}"
        StartDate: "{{ ansible_date_time.date }}"
    register: rt

  - name: Show rt
    ansible.builtin.debug: var=rt




  - name: Create a Security Group for SSH
    amazon.aws.ec2_group:
      name: SSH
      description: SSH
      vpc_id: "{{ vpc.vpc.id }}"
      state: present
      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0    # any
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0    # any
      tags:
        Project: "{{ project_name }}"
        StartDate: "{{ ansible_date_time.date }}"
    register: sg

  - name: Show sg
    ansible.builtin.debug: var=sg




  - name: Create an EC2 Instance
    amazon.aws.ec2:
      state: present    # present | absent | restarted | running | stopped
      image: "{{ ami_id }}"
      instance_type: "{{ instance_type | default('t2.micro') }}"
      vpc_subnet_id: "{{ subnet.subnet.id }}"
      group: "{{ sg.group_name }}"
      key_name: "{{ project_name }}.public_key"   # SSH Key Name
      count: 1
      wait: yes   # wait for instance to reach desired state before returning
      assign_public_ip: yes     # requires vpc_subnet_id
      instance_tags:
        Name: AWS_EC2_Instance
        Project: "{{ project_name }}"
        StartDate: "{{ ansible_date_time.date }}"
    register: ec2

  - name: Show ec2
    ansible.builtin.debug: var=ec2

  - name: Show SSH Commands for Instance
    ansible.builtin.debug:
      msg: 
      - "ssh -i ./{{ project_name }}.private_key.pem ec2-user@{{ ec2.instances[0].public_ip}}"
      - "ssh -i ./{{ project_name }}.private_key.pem ec2-user@{{ ec2.instances[0].public_dns_name}}"




...
